Database name: pharmacywarehouse

Database tables: staff, drug, session

staff users are dividied into three divisions: recipient, storekeeper, admin

Tables Description:
staff: id, name, family, staffid, userid, position, password

drug: id, name, drugid, company, price, stock

session: id, userid, sessionid

From the start:
when the program runs, the "Admin.Create_admin_user()(error)" is called, it gets information from the console to create an Admin user record in the database.

if everything went fine and there are no error it passes "router.Routing()" function as handler for "/" path handle func.

then it serves "static" directory for the "/static/" path.

and then starts the server.


Admin Part:
this is the admin user, admin user can manage other staff which are recipients and storekeepers.

Admin has a home page = "/admin/home" or "/admin" => "staff.Staff_home_page(w,r)()"

add staff page = "/admin/addstaff" => "admin.Admin_add_staff_page(w,r)()"

add staff processor = "/admin/addstaffprocessor" => "admin.Admin_add_staff_processor(w,r)()"

when admin visits the "/admin/addstaff" page, first it will call "session.Is_user_authorized()(error)" to check if the sessionid in the browser,

is associated with a user who is authorized to visit the path or not.

if the user is authorized it will show the add staff page, if not the user will be redirected.

in the add staff page there is a form there are four inputs for "name", "family", "position" and "initial password".

the content of the form will be submitted to "/admin/addstaffprocessor" via POST method.

in the "/admin/addstaffprocessor" first it will call "session.Is_user_authorized" to check if the sessionid in the browser is associated with a user who is authorized to visit the path or not.

if the user is authorized it will parse the submited form to get the information, if user is not authorized it will be redirected.

after parsing the form it'll get "name", "family", "position", "password" from the form.

and with those information it will create the user record in the database by calling "staff.Create_staff_record(name, family, position, password)(error)" to create the user record.


Login Part:
this is login part where users can login, it consists of two main function.

login page = "/staff/login" => "login.Login_page(w,r)()"

login processor = "/staff/loginprocessor" => "login.Login_processor(w,r)()"

when user visits the "/staff/login" first it will check if there is a cookie with the name of "sessionid" exists or not.

this is an indicator which shows if a logged user is visiting this path or not, if there is a session, user will be redirected to the "/staff/home" path.

if there is no "sessionid" cookie that means probably the user is not logged in or the session doesn't exist for any reason.

so the login page will be shown to the user, in the login page, there are two inputs for "staffid" and "password"

the user will be authenticate via their "staffid" and their "password".

the content of the form will be submitted to "/staff/loginprocessor" via POST method.

in the "/staff/loginprocessor" first it will check for "sessionid" cookie again, and if there is no cookie with that name, it continues, otherwise the user will be redirected to 

the "/staff/home" path.

if this is not the case, it will parse the form to get the "staffid" and "password".

then it will cal another function "Authenticate_user(staffid, password) (string, error)".

it will take the "staffid" and "password", it tries to get the "userid" of a user with that "staffid" and "password", if everything went ok it will return the userid as the string and 

error. after the user was authenticated, a new uuid will be generated to act as the "sessionid", then "session.Set_session(w, sessionid, userid)(error) will be called to set the 

sessionid cookie and create the session record with that "sessionid" and "userid" and then the user will be redirected to "/staff/home"
















































